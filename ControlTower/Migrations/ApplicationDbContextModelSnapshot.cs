// <auto-generated />
using System;
using ControlTower.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ControlTower.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.AccessLevel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LevelName")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.Application", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationName")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.Department", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.Occupation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OccupationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OccupationName")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastWorkingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OccupationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Religion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StaffCardID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StaffRFIDCardID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartWorkingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkPassCardExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkPassCardIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkPassCardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WorkPermit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OccupationID");

                    b.HasIndex("StaffCardID")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.UserApplicationAccess", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GrantedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GrantedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AccessLevelID");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GrantedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("EmployeeID", "ApplicationID")
                        .IsUnique();

                    b.ToTable("UserApplicationAccesses");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ActionTaken", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActionTakenWarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceReportFormID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ActionTakenWarehouseID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ServiceReportFormID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ActionTaken");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ActionTakenWarehouse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ActionTakenWarehouses");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.FollowupActionWarehouse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowupActionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FollowupActionWarehouses");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.FormStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormStatusWarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceReportFormID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormStatusWarehouseID");

                    b.HasIndex("ServiceReportFormID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FormStatus");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.FormStatusWarehouses", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FormStatusWarehouses");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.FurtherActionTaken", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FurtherActionTakenWarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceReportFormID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FurtherActionTakenWarehouseID");

                    b.HasIndex("ServiceReportFormID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FurtherActionTaken");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.FurtherActionTakenWarehouse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FurtherActionTakenWarehouses");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.IssueFound", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IssueFoundWarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceReportFormID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IssueFoundWarehouseID");

                    b.HasIndex("ServiceReportFormID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("IssueFound");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.IssueFoundWarehouse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("IssueFoundWarehouses");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.IssueReportWarehouse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("IssueReportWarehouses");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.IssueReported", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IssueReportWarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceReportFormID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IssueReportWarehouseID");

                    b.HasIndex("ServiceReportFormID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("IssueReported");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.LocationWarehouse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LocationWarehouses");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ProjectNoWarehouse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ProjectNoWarehouses");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ServiceReportForm", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FailureDetectedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FollowupActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("LocationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectNoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SystemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FollowupActionID");

                    b.HasIndex("LocationID");

                    b.HasIndex("ProjectNoID");

                    b.HasIndex("SystemID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ServiceReportForms");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ServiceType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceReportFormID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceTypeWarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ServiceReportFormID");

                    b.HasIndex("ServiceTypeWarehouseID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ServiceTypeWarehouse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ServiceTypeWarehouses");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.SystemWarehouse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SystemWarehouses");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.AccessLevel", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByEmployee")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("UpdatedByEmployee");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.Application", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByEmployee")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("UpdatedByEmployee");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.Department", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByEmployee")
                        .WithMany("CreatedDepartments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByEmployee")
                        .WithMany("UpdatedDepartments")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("UpdatedByEmployee");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.Occupation", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByEmployee")
                        .WithMany("CreatedOccupations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByEmployee")
                        .WithMany("UpdatedOccupations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("UpdatedByEmployee");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.User", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByEmployee")
                        .WithMany("CreatedEmployees")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.Occupation", "Occupation")
                        .WithMany("Employees")
                        .HasForeignKey("OccupationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByEmployee")
                        .WithMany("UpdatedEmployees")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("Department");

                    b.Navigation("Occupation");

                    b.Navigation("UpdatedByEmployee");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.UserApplicationAccess", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.AccessLevel", "AccessLevel")
                        .WithMany("UserApplicationAccesses")
                        .HasForeignKey("AccessLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "GrantedByEmployee")
                        .WithMany()
                        .HasForeignKey("GrantedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByEmployee")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccessLevel");

                    b.Navigation("Application");

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("Employee");

                    b.Navigation("GrantedByEmployee");

                    b.Navigation("UpdatedByEmployee");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ActionTaken", b =>
                {
                    b.HasOne("ControlTower.Models.ServiceReportSystem.ActionTakenWarehouse", "ActionTakenWarehouse")
                        .WithMany()
                        .HasForeignKey("ActionTakenWarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("ControlTower.Models.ServiceReportSystem.ServiceReportForm", "ServiceReportForm")
                        .WithMany("ActionTaken")
                        .HasForeignKey("ServiceReportFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("ActionTakenWarehouse");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ServiceReportForm");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ActionTakenWarehouse", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.FollowupActionWarehouse", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.FormStatus", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("ControlTower.Models.ServiceReportSystem.FormStatusWarehouses", "FormStatusWarehouse")
                        .WithMany()
                        .HasForeignKey("FormStatusWarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.ServiceReportSystem.ServiceReportForm", null)
                        .WithMany("FormStatus")
                        .HasForeignKey("ServiceReportFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("FormStatusWarehouse");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.FormStatusWarehouses", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.FurtherActionTaken", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("ControlTower.Models.ServiceReportSystem.FurtherActionTakenWarehouse", "FurtherActionTakenWarehouse")
                        .WithMany()
                        .HasForeignKey("FurtherActionTakenWarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.ServiceReportSystem.ServiceReportForm", "ServiceReportForm")
                        .WithMany("FurtherActionTaken")
                        .HasForeignKey("ServiceReportFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("FurtherActionTakenWarehouse");

                    b.Navigation("ServiceReportForm");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.FurtherActionTakenWarehouse", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.IssueFound", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("ControlTower.Models.ServiceReportSystem.IssueFoundWarehouse", "IssueFoundWarehouse")
                        .WithMany()
                        .HasForeignKey("IssueFoundWarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.ServiceReportSystem.ServiceReportForm", "ServiceReportForm")
                        .WithMany("IssueFound")
                        .HasForeignKey("ServiceReportFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("IssueFoundWarehouse");

                    b.Navigation("ServiceReportForm");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.IssueFoundWarehouse", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.IssueReportWarehouse", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.IssueReported", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("ControlTower.Models.ServiceReportSystem.IssueReportWarehouse", "IssueReportWarehouse")
                        .WithMany()
                        .HasForeignKey("IssueReportWarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.ServiceReportSystem.ServiceReportForm", "ServiceReportForm")
                        .WithMany("IssueReported")
                        .HasForeignKey("ServiceReportFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("IssueReportWarehouse");

                    b.Navigation("ServiceReportForm");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.LocationWarehouse", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ProjectNoWarehouse", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ServiceReportForm", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.ServiceReportSystem.FollowupActionWarehouse", "FollowupAction")
                        .WithMany()
                        .HasForeignKey("FollowupActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.ServiceReportSystem.LocationWarehouse", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.ServiceReportSystem.ProjectNoWarehouse", "ProjectNo")
                        .WithMany()
                        .HasForeignKey("ProjectNoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.ServiceReportSystem.SystemWarehouse", "System")
                        .WithMany()
                        .HasForeignKey("SystemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("FollowupAction");

                    b.Navigation("Location");

                    b.Navigation("ProjectNo");

                    b.Navigation("System");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ServiceType", b =>
                {
                    b.HasOne("ControlTower.Models.ServiceReportSystem.ServiceReportForm", null)
                        .WithMany("ServiceType")
                        .HasForeignKey("ServiceReportFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.ServiceReportSystem.ServiceTypeWarehouse", "ServiceTypeWarehouse")
                        .WithMany()
                        .HasForeignKey("ServiceTypeWarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("ServiceTypeWarehouse");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ServiceTypeWarehouse", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.SystemWarehouse", b =>
                {
                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlTower.Models.EmployeeManagementSystem.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.AccessLevel", b =>
                {
                    b.Navigation("UserApplicationAccesses");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.Occupation", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ControlTower.Models.EmployeeManagementSystem.User", b =>
                {
                    b.Navigation("CreatedDepartments");

                    b.Navigation("CreatedEmployees");

                    b.Navigation("CreatedOccupations");

                    b.Navigation("UpdatedDepartments");

                    b.Navigation("UpdatedEmployees");

                    b.Navigation("UpdatedOccupations");
                });

            modelBuilder.Entity("ControlTower.Models.ServiceReportSystem.ServiceReportForm", b =>
                {
                    b.Navigation("ActionTaken");

                    b.Navigation("FormStatus");

                    b.Navigation("FurtherActionTaken");

                    b.Navigation("IssueFound");

                    b.Navigation("IssueReported");

                    b.Navigation("ServiceType");
                });
#pragma warning restore 612, 618
        }
    }
}
